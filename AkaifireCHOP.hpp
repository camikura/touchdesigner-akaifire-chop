#pragma once

#include <cmath>
#include <iostream>
#include <map>
#include <queue>
#include <string>
#include <thread>
#include <vector>
#include <windows.h>

#include "RtMidi.h"
#pragma comment(lib, "winmm.lib")

#include "CPlusPlus_Common.h"
#include "CHOP_CPlusPlusBase.h"

using namespace std;

vector<string> chan_names;
vector<double> chan_values;

const unsigned char logoBitmap[] = {
  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3e, 0x7f, 0xcf, 0xff, 0xc0, 0x3c, 0x00, 0xf0, 0x13, 0xe0, 0x27, 0x00, 0x31, 0xf1, 0xfc, 0x00,
  0x3c, 0x3f, 0x87, 0xff, 0x80, 0x18, 0x00, 0xe0, 0x03, 0xc0, 0x07, 0x00, 0x31, 0xf1, 0xfc, 0x00,
  0x3c, 0x1f, 0x87, 0xff, 0x0f, 0x18, 0xff, 0xc3, 0xc3, 0x87, 0x87, 0x1f, 0xf1, 0xf1, 0xfc, 0x00,
  0x3e, 0x1f, 0xc3, 0xff, 0x9f, 0x18, 0xff, 0xc7, 0xe3, 0x0f, 0xc7, 0x3f, 0xf1, 0xf1, 0xfc, 0x00,
  0x3f, 0x0f, 0xc1, 0xff, 0xfc, 0x18, 0xff, 0x87, 0x03, 0x1e, 0x07, 0x3f, 0xf1, 0xc1, 0xfc, 0x00,
  0x3f, 0x07, 0xe0, 0xff, 0xc0, 0x18, 0x01, 0x8f, 0x03, 0x1e, 0x07, 0x00, 0x70, 0x03, 0xfc, 0x00,
  0x3f, 0x83, 0xf0, 0xff, 0x80, 0x78, 0x01, 0x8f, 0xff, 0x1f, 0xff, 0x00, 0x70, 0x01, 0xfc, 0x00,
  0x3f, 0xc3, 0xf8, 0x7f, 0x07, 0xf8, 0xff, 0x87, 0xff, 0x0f, 0xff, 0x1f, 0xf1, 0xf1, 0xfc, 0x00,
  0x3f, 0xe1, 0xfc, 0x3f, 0x1f, 0x38, 0xff, 0xc7, 0xe7, 0x8f, 0xcf, 0x3f, 0xf1, 0xf1, 0xfc, 0x00,
  0x3f, 0xe0, 0xfc, 0x1f, 0x0e, 0x18, 0x7f, 0xc3, 0xc7, 0x87, 0x0f, 0x1f, 0xf1, 0xe1, 0xfc, 0x00,
  0x3f, 0xf0, 0x7e, 0x1f, 0x80, 0x38, 0x00, 0xe0, 0x07, 0xc0, 0x0f, 0x00, 0x30, 0x01, 0xfc, 0x00,
  0x3f, 0xf8, 0x7f, 0x0f, 0xc0, 0x7c, 0x01, 0xf8, 0x1f, 0xf0, 0x3f, 0x00, 0x38, 0x07, 0xfc, 0x00,
  0x3d, 0xfc, 0x3f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3d, 0xfc, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0xfe, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x7f, 0x0f, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x3f, 0x87, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x3f, 0x83, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
  0x3c, 0x1f, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
  0x3c, 0x0f, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
  0x3c, 0x07, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x07, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x07, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x07, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x0f, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
  0x3c, 0x1f, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
  0x3c, 0x3f, 0x83, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
  0x3c, 0x3f, 0x87, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x7f, 0x0f, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0xfe, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3d, 0xfc, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3d, 0xfc, 0x3f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xf8, 0x7f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xf0, 0x7e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xe0, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xe1, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xc3, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0x83, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0x07, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3e, 0x1f, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x1f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3c, 0x3f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3e, 0x7f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
};

static const unsigned char bitMutate[8][7] = {
  { 13,  19,  25,  31,  37,  43,  49 },
  {  0,  20,  26,  32,  38,  44,  50 },
  {  1,   7,  27,  33,  39,  45,  51 },
  {  2,   8,  14,  34,  40,  46,  52 },
  {  3,   9,  15,  21,  41,  47,  53 },
  {  4,  10,  16,  22,  28,  48,  54 },
  {  5,  11,  17,  23,  29,  35,  55 },
  {  6,  12,  18,  24,  30,  36,  42 }
};

struct button_led {
    unsigned char address = 0x00;
    unsigned char value = 0x7f;
    double min_value = 0.0;
    double max_value = 0.0;
};

map<string, button_led> button_leds = {
	{"Ledpatback",   button_led{0x1f, 0x7f, 0.0, 2.0}},
	{"Ledpatnext",   button_led{0x20, 0x7f, 0.0, 2.0}},
	{"Ledbrowser",   button_led{0x21, 0x7f, 0.0, 2.0}},
	{"Ledgridleft",  button_led{0x22, 0x7f, 0.0, 2.0}},
	{"Ledgridright", button_led{0x23, 0x7f, 0.0, 2.0}},
	{"Ledsolo1",     button_led{0x24, 0x7f, 0.0, 2.0}},
	{"Ledsolo2",     button_led{0x25, 0x7f, 0.0, 2.0}},
	{"Ledsolo3",     button_led{0x26, 0x7f, 0.0, 2.0}},
	{"Ledsolo4",     button_led{0x27, 0x7f, 0.0, 2.0}},
	{"Ledrect1",     button_led{0x28, 0x7f, 0.0, 1.0}},
	{"Ledrect2",     button_led{0x29, 0x7f, 0.0, 1.0}},
	{"Ledrect3",     button_led{0x2a, 0x7f, 0.0, 1.0}},
	{"Ledrect4",     button_led{0x2b, 0x7f, 0.0, 1.0}},
	{"Ledstep",      button_led{0x2c, 0x7f, 0.0, 4.0}},
	{"Lednote",      button_led{0x2d, 0x7f, 0.0, 4.0}},
	{"Leddrum",      button_led{0x2e, 0x7f, 0.0, 4.0}},
	{"Ledperform",   button_led{0x2f, 0x7f, 0.0, 4.0}},
	{"Ledshift",     button_led{0x30, 0x7f, 0.0, 4.0}},
	{"Ledalt",       button_led{0x31, 0x7f, 0.0, 2.0}},
	{"Ledpattern",   button_led{0x32, 0x7f, 0.0, 4.0}},
	{"Ledplay",      button_led{0x33, 0x7f, 0.0, 4.0}},
	{"Ledstop",      button_led{0x34, 0x7f, 0.0, 2.0}},
	{"Ledrec",       button_led{0x35, 0x7f, 0.0, 4.0}}
};

vector<string> button_led_names = {
	"patback","patnext","browser","gridleft","gridright",
	"step","note","drum","perform","shift","alt",
	"pattern","play","stop","rec"
};

void callback(double deltatime, std::vector<unsigned char>* message, void* userData);

/* Midi Class */
class Midi {
private:

    RtMidiIn* midiin = 0;
    RtMidiOut* midiout = 0;

public:
    Midi();
    ~Midi();

    vector<string> in_devices;
    vector<string> out_devices;

    bool setupIn(unsigned int index);
    bool setupOut(unsigned int index);

    void sendMessage(vector<unsigned char>* message);

    bool isInPortOpen();
    bool isOutPortOpen();
};

class AkaifireCHOP : public CHOP_CPlusPlusBase
{
private:
	thread send_thread;
	bool thread_active = false;


	unsigned char bank_leds = 0x00;

	int in_device_id = -1;
	int out_device_id = -1;

	vector<uint32_t> last_pixels;

	Midi midi;
	queue<vector<unsigned char> > que;

	void startThread();
	void stopThread();

	void executeHandleParameters(const OP_Inputs* inputs);
	void executeHandleInputs(const OP_Inputs* inputs);
	void executeHandlePadsInputs(const OP_Inputs* inputs);

	void handlePadsIndexes(vector<int> indexes);

public:
	AkaifireCHOP(const OP_NodeInfo* info);
	virtual ~AkaifireCHOP();

	void getGeneralInfo(CHOP_GeneralInfo* ginfo, const OP_Inputs* inputs, void* reserved1);
	bool getOutputInfo(CHOP_OutputInfo* info, const OP_Inputs* inputs, void* reserved1);
	void getChannelName(int32_t index, OP_String* name, const OP_Inputs* inputs, void* reserved1);
	void execute(CHOP_Output* output, const OP_Inputs* inputs, void* reserved);
	int32_t getNumInfoCHOPChans(void* reserved1);
	void getInfoCHOPChan(int32_t index, OP_InfoCHOPChan* chan, void* reserved1);
	bool getInfoDATSize(OP_InfoDATSize* infoSize, void* reserved1);
	void getInfoDATEntries(int32_t index, int32_t nEntries, OP_InfoDATEntries* entries, void* reserved1);
    void setupParameters(OP_ParameterManager* manager, void* reserved1);
    void pulsePressed(const char* name, void* reserved1);

};

